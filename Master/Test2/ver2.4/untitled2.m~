
% MPM code
addpath(genpath(['..' filesep '..' filesep 'MPM_release_v1']));

nV1 = 3;
nV2 = 3;

match = [[1,1,2,2,3,3,3];[1,2,1,2,1,2,3]];
sim = [0.4, 0.6, 0.8, 0.2, 0.6, 0.2, 0.2];

v1 = [[0,1,0];[0,0,1]];
v2 = [[0,1,1];[0,0,1]];

[ uniq_feat2, tmp, new_feat2 ] = unique(match(2,:));

cand_matchlist_uniq = [ match(1,:); new_feat2 ];

Adj1 = [[0,1,1];[1,0,1];[1,1,0]];
Adj2 = [[0,0,1];[0,0,1];[1,1,0]];

% E12 = ones(nV1,nV2)
% E = ones(2, 2)
% [i,j] = find(E)
% [L12(:,1), L12(:,2)] = find(E12);
% L12
% [group1, group2] = make_group12(L12);
% conflictMatrix = getConflictMatrix(group1, group2)
% 
% E = ones(2, 2)
% [L12(:,1), L12(:,2)] = find(E);
% L12
% [group1, group2] = make_group12(L12)
% conflictMatrix = getConflictMatrix(group1, group2)
% ~full(conflictMatrix)

% conflict groups
L12(:,1) = match(1,:).';
L12(:,2) = match(2,:).';
[ group1, group2 ] = make_group12(L12);
conflictMatrix = getConflictMatrix2(group1, group2, Adj1, Adj2);

% nAffMatrix = nnz(E12);
nAffMatrix = size(match, 2);
AffMatrix = zeros(nAffMatrix);

%     edge similarity (non-diagonal elements of the affinity matrix

% [IJ(:,1), IJ(:,2)] = find(Adj1);
% [AB(:,1), AB(:,2)] = find(Adj2);
% 
% D = zeros(nAffMatrix);
% 
% for ia = 1:size(cand_matchlist_uniq,2)
%     i = cand_matchlist_uniq(1, ia);
%     a = cand_matchlist_uniq(2, ia);
%     
%     for jb = 1:size(cand_matchlist_uniq,2)
%         j = cand_matchlist_uniq(1, jb);
%         b = cand_matchlist_uniq(2, jb);
%           
%         if (ismember([i, j], IJ, 'rows') && ismember([a, b], AB, 'rows'))
%                 
%             var1 = sum( (v1(1:2, i) - v1(1:2, j)).^2,1);
%             e_ij = sqrt(var1);
% 
%             var2 = sum( (v2(1:2, a) - v2(1:2, b)).^2,1);
%             e_ab = sqrt(var2);
%             [~, ind_i] = ismember([i, a], L12, 'rows');
%             [~, ind_j] = ismember([j, b], L12, 'rows');
%             D(ind_i, ind_j) =  (e_ij-e_ab)^2; 
%         end
%             
%     end
% end
% 
% 
% D
% D.*~full(getConflictMatrix(group1, group2))

[L1(:,2), L1(:,1)] = find(Adj1);

[L2(:,2), L2(:,1)] = find(Adj2);

G1 = v1(:, L1(:,1))-v1(:, L1(:,2));
G2 = v2(:, L2(:,1))-v2(:, L2(:,2));

G1 = sqrt(G1(1,:).^2+G1(2,:).^2);
G2 = sqrt(G2(1,:).^2+G2(2,:).^2);

d1 = zeros(nV1, nV2);
for i=1:size(L1,1)
    d1(L1(i,2), L1(i,1)) = G1(i);
end    

d2 = zeros(nV1, nV2);
for i=1:size(L2,1)
    d2(L2(i,2), L2(i,1)) = G2(i);
end 

% repmat(G1, nV2, nV2)
% kron(G2,ones(nV1))
% M = (repmat(G1, nV2, nV2)-kron(G2,ones(nV1)) ).^2;

nAffMatrix = size(L12,1);
D = zeros(nAffMatrix);
for ia=1:nAffMatrix
    i = L12(ia, 1);
    a = L12(ia, 2);
    for jb=1:nAffMatrix
        j = L12(jb, 1);
        b = L12(jb, 2);
        
        D(ia,jb) = (d1(i,j)-d2(a,b))^2;
    end
end

D(1:(nAffMatrix+1):end)=0;
D

scale_2D = sum(D(:))/size(find(D(:)>0),1);

D = exp(-(D>0)./scale_2D);

D

D = D.*~full(conflictMatrix);
D(1:(nAffMatrix+1):end)=0


x = MPM(D, group1, group2);
Objective = x'*AffMatrix * x;
  
x = reshape(x, [nV1, nAffMatrix/nV1]);

newCorrMatrix = roundMatrix(x)
